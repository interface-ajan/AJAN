' ================================================================================
' ERROR, SETERRTBL サンプルプログラム 
'  SETERRTBLで独自に定義したエラーコードを登録し、
'  ユーザー定義した関数(TEST_DIV)で、引数のチェックを行って、
'  不正な引数値であれば、ERROR命令で 任意のエラーを発生します。
'				Copyright 2018 Interface Corporation
' ================================================================================
CLS

'エラー発生行、エラーコード、エラーメッセージを表示するサブルーチン
SUB ERR_SUB(ERR_N,ERR_M$,ERR_L)
	? "エラー発生行:"; ERL
	? "エラーコード:"; ERR
	? "エラーメッセージ:"; ERM$
	? "エラー発生時関数名:"; ERN$
	? "エラー詳細メッセージ:"; ERRMSG$
	? "エラー詳細コード:"; ERRSUB
	
	' アプリケーションを実際に作る場合は、ここでエラーに対応する処理をここに記述します。
	' (たとえば、即時終了など)
	' このサンプルでは、何もせずに抜け出すので、エラー発生行の次に処理が移ります。
END SUB

'エラーが発生したら ERR_SUB サブルーチンを呼び出す
ON ERROR CALL ERR_SUB
ERROR ON

' 独自のエラーコードを定義した情報を組み込む
SETERRTBL "/usr/share/interface/AJANPro/samples/BASE/ERROR_SETERRTBL.CSV"

' エラーチェックを行うサブルーチン例
' 引数が期待通りになっているか検証し、そうでないなら ERROR 命令でエラーを通知するようにする
' エラーを通知する際、独自に定義したエラーコードで通知するようにする。
FUNCTION TEST_DIV(V1, V2)
	IF V1 < 0 THEN
		ERROR 10002, "V1引数が不正", "TEST_1"
		EXIT FUNCTION	' サンプルでは エラー処理(ERR_SUB)から抜けてくるので、そのまま関数脱出しています
	END IF
	IF V2 = 0 THEN
		ERROR 10001, "V2引数が不正", "TEST_1"
		EXIT FUNCTION	' サンプルでは エラー処理(ERR_SUB)から抜けてくるので、そのまま関数脱出しています
	END IF
	
	TEST_DIV = V1 / V2
END FUNCTION

? "*異常時の呼び出し例"
V = TEST_DIV(10, 0)

IF ERR <> 0 THEN
	? "エラーが発生しました:"; ERR
	ERROR 0		' エラー情報をクリアします
END IF

? "*正常時の呼び出し例"
V = TEST_DIV(10, 5)

IF ERR <> 0 THEN
	? "エラーが発生しました:"; ERR
	ERROR 0		' エラー情報をクリアします
END IF

? "終わり"
END
