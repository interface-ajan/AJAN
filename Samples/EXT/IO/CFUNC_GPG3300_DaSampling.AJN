' ================================================================================
' C言語連携＞DA制御テスト＞DaSampling サンプルプログラム 
'  C言語連携機能を使って、GPG-3300のDAライブラリを呼び出すサンプルプログラムです。
'  GPG-3300付属のDaSampling.c サンプルの移植例です。
'  「DaStartSampling」 関数を用いて、連続出力を実施して結果を表示します。
'				Copyright 2021 Interface Corporation
' ================================================================================

' GPG-3300のお助けルーチンが入っている
include "GPG3300_EX.AJN"

' GPG-3300のヘッダファイルを読み取ります
s$ = str_freadall$("/usr/include/fbida.h")	' GPG-3300をインストール必須です
s$ = ICONV$(s$, "UTF-8", "EUCJP")		' 2021/1/14時点で、fbida.h は EUC形式文字列なので UTF-8文字列に変更します
s$ = REPLACE$(s$, "int DaOpenEx", "//int DaOpenEX")	' 2021/1/14時点で、未実装関数が定義されているので対象から除外します
CDECLARE "libgpg3300.so", s$

OBJECT	boardSpec@ AS MEMORY			' DABOARDSPEC構造体に相当する情報をメモリに入れる用
boardSpec@ = CSTRUCT@("DABOARDSPEC")
OBJECT daSmplConfig@ AS MEMORY			' DASMPLREQ構造体に相当する情報をメモリに入れる用
daSmplConfig@ = CSTRUCT@("DASMPLREQ")
OBJECT daSmplChReq@ AS MEMORY			' DASMPLCHREQ構造体に相当する情報をメモリに入れる用
daSmplChReq@ = CSTRUCT@("DASMPLCHREQ", 2)
OBJECT data@ AS MEMORY					' DaOutputDA.c で、bData, wData, dwData で格納するメモリに相当する
data@ = CALLOC@(1024 * 2 * 2)

dnum = 1
INPUT "デバイス番号を入力してください:"; dnum

' Open a device.
errno = CFUNCALL(ret, "DaOpen", dnum)
PRINT "open=", ret, errno

errno = CFUNCALL(ret, "DaGetDeviceInfo", dnum, boardSpec@)
PRINT "getDeiveInfo=", ret, errno
'PRINT STR_DUMP$(boardSpec@.PEEKSTR$(0, boardSpec@.SIZEOF()))
PRINT boardSpec@.TOJSON$()			' 構造体情報をJSON形式で出力

ulSmplBufferSize = 1024
errno = CFUNCALL(ret, "DaSetBoardConfig", dnum, ulSmplBufferSize, 0, 0, 0)
PRINT "setBoardConfig=", ret, errno

' Retrieve the sampling conditions.
errno = CFUNCALL(ret, "DaGetSamplingConfig", dnum, daSmplConfig@)
PRINT "getSmplConfig=", ret, errno
'PRINT STR_DUMP$(adSmplConfig@.PEEKSTR$(0, daSmplConfig@.SIZEOF()))
PRINT daSmplConfig@.TOJSON$()			' 構造体情報をJSON形式で出力

rng = daSmplConfig@.GETMEMVAL("SmplChReq[0].ulRange")
res = boardSpec@.GETMEMVAL("ulResolution")
PRINT "分解能="; res
PRINT "レンジ(hex)=&H"; HEX$(rng, 8)
STRUCT RANGE_INFO	info
info = GET_RANGE_INFO(rng)		' レンジ値の説明、上限値、下限値を取得する
PRINT "レンジ情報="; info

' Configure the number of output channels to 2 channels.
daSmplConfig@.SETMEMVAL("ulChCount", 2)
ch_cnt = daSmplConfig@.GETMEMVAL("ulChCount")
FOR I=0 TO ch_cnt - 1
	daSmplConfig@.SETMEMVAL("SmplChReq["+STR$(I)+"].ulChNo", I+1)
	daSmplConfig@.SETMEMVAL("SmplChReq["+STR$(I)+"].ulRange", rng)
NEXT I

errno = CFUNCALL(ret, "DaSetSamplingConfig", dnum, daSmplConfig@)
PRINT "setSmplConfig=", ret, errno

' Create the output data
IDX = 0
FOR I=0 TO ulSmplBufferSize - 1
	IF res = 12 THEN
		data@.POKEHALF(IDX, I)
		IDX = IDX + 2
		data@.POKEHALF(IDX, 1024 - I)
		IDX = IDX + 2
	ELSEIF res = 16 THEN
		data@.POKEHALF(IDX, &H40 * I)
		IDX = IDX + 2
		data@.POKEHALF(IDX, 1024 - (&H40 * I))
		IDX = IDX + 2
	ELSE
		ASSERT FALSE, "no support resolution"
	END IF
NEXT I

' Configure the output data
errno = CFUNCALL(ret, "DaSetSamplingData", dnum, data@, ulSmplBufferSize)
PRINT "setSamplingData=", ret, errno

' Start the analog output with synchronous mode.
errno = CFUNCALL(ret, "DaStartSampling", dnum, 1/* FLAG_SYNC */)
PRINT "startSampling=", ret, errno

' Close the device.
errno = CFUNCALL(ret, "DaClose", dnum)
PRINT "close=", ret, errno

' 後片付け
OBJDELETE boardSpec@
OBJDELETE daSmplConfig@
OBJDELETE daSmplChReq@
OBJDELETE data@

? "bye.bye"
end
