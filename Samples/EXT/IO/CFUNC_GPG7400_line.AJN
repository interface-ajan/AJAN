' ================================================================================
' C言語連携＞モーションテスト＞line サンプルプログラム 
'  C言語連携機能を使って、GPG-7400のモーションライブラリを呼び出すサンプルプログラムです。
'  GPG-7400付属のline.c サンプルの移植例です。
'  X軸、Y軸に対して直線補間1動作を連続して2回動作させます。
'  最初の直線補間1動作を起動する条件として同時スタートを使用します。
'  元のline.c では、何かキーを押すと処理が停止しますが、このサンプルでは
'  F2キーを押すと処理が停止するようになっています。
'  IDE上で実行すると出力するメッセージが流れます。端末上で実行すると画面上に固定されます。
'
'				Copyright 2021 Interface Corporation
' ================================================================================

' -----------------------------------------------------------------------------
' メイン処理です

' GPG-7400のヘッダファイルを読み取ります
s$ = str_freadall$("/usr/include/fbimtn.h")	' GPG-7400をインストール必須です
CDECLARE "libgpg7400.so", s$

' motion.cでは、何かキーを押すと処理が停止するようにしていますが、
' このサンプルでは、F2キーを押すと処理が停止するようにしています。
IS_STOP = FALSE
ON KEY(2) CALL CB_KEY_STOP
KEY ON

nDevice% = OpenBoard()
IF nDevice% = -1 THEN
	PRINT CHR$(13)+"  Error : Invalid device"+CHR$(13)
	END
END IF

nRet% = ControlBoard(nDevice%)
IF nRet% <> 0 THEN
	CALL DispError(nRet%)
ELSE
	PRINT CHR$(10); "  End program"; CHR$(10)
END IF

errno = CFUNCALL(nRet%, "MtnClose", nDevice%)

? "bye.bye"
end

' =============================================================================
' F2キーを押した際の処理
SUB CB_KEY_STOP(num%)
	IS_STOP = TRUE
END SUB


SUB Locate(x%, y%)
	PRINT CHR$(&H1B); "["; (y+1); ";"; (x+1); "H";
END SUB

FUNCTION OpenBoard()

	LOCAL	nRet%, nDevice%, errno

	' display title
	nRet% = SHELL SYSTEM("clear")
	PRINT ""
	PRINT " =================================================="
	PRINT "    Sample program to start line                   "
	PRINT "    Copyright 2021 Interface Corporation           "
	PRINT " =================================================="
	PRINT ""
	PRINT "  Enter the device number in decimal : ";
	INPUT nDevice%

	errno = CFUNCALL(nRet%, "MtnOpen", nDevice%, 0/*MTR_FLAG_NORMAL*/)
	PRINT "MtnOpen=", HEX$(nRet%), errno
	IF nRet% <> 0 THEN nDevice% = -1

	OpenBoard = nDevice%

END FUNCTION

FUNCTION ControlBoard(nDevice%)

	LOCAL	nRet%, errno

	LOCAL OBJECT	Line@ AS MEMORY
	Line@ = CSTRUCT@("MTNLINE")
	LOCAL OBJECT	sync@ AS MEMORY
	sync@ = CALLOC@(2 * 4)		' sizeof(unsigned short) is 2bytes
	LOCAL	status&(3)
	LOCAL	counter&(1)
	LOCAL	speed!(1)
	LOCAL	szIn$(3)
	LOCAL	szAxis$(1)
	szAxis$ = [ "Axis X"; "Axis Y" ]

	' == MtnSetPulseOut ==
	errno = CFUNCALL(nRet%, "MtnSetPulseOut", nDevice%, &H03, 0 /*MTR_METHOD*/, &H01)
	IF nRet% <> 0 THEN
		ControlBoard = nRet%
		EXIT FUNCTION
	END IF

	' Clear counter
	' == MtnWriteCounter ==
	' counter[4] = {axis X, axis Y, axis Z, axis U}
	errno = CFUNCALL(nRet%, "MtnWriteCounter", nDevice%, &H03, 1 /*MTR_COUNTER*/, counter&)
	IF nRet% <> 0 THEN
		ControlBoard = nRet%
		EXIT FUNCTION
	END IF

	' ***** Line Motion 1 *******************************
	' == MtnSetSync ==
	' sync[4] = {axis X, axis Y, axis Z, axis U}
	sync@.POKEHALF(2 * 0, &H20 /*MTR_SYNC_EXT*/)
	sync@.POKEHALF(2 * 1, &H20 /*MTR_SYNC_EXT*/)
	errno = CFUNCALL(nRet%, "MtnSetSync", nDevice%, &H03, &H00 /*MTR_START_MODE*/, sync@)
	IF nRet% <> 0 THEN
		ControlBoard = nRet%
		EXIT FUNCTION
	END IF

	' == MtnSetMotionLine ==

	Line@.SETMEMVAL("wAxis", &h03)
	Line@.SETMEMVAL("wClock", 299)
	Line@.SETMEMVAL("wMode", &H06/*MTR_LINE*/)
	Line@.SETMEMVAL("wAccMode", &h00/*MTR_ACC_NORMAL*/)
	Line@.SETMEMVAL("fLowSpeed", 50.0)
	Line@.SETMEMVAL("fSpeed", 250.0)
	Line@.SETMEMVAL("ulAcc", 200)
	Line@.SETMEMVAL("ulDec", 500)
	Line@.SETMEMVAL("fSAccSpeed", 0.0)
	Line@.SETMEMVAL("fSDecSpeed", 0.0)
	Line@.SETMEMVAL("lStep[0]", 1000)
	Line@.SETMEMVAL("lStep[1]", 700)
	errno = CFUNCALL(nRet%, "MtnSetMotionLine", nDevice%, &H00 /*MTR_LINE_NORMAL*/, Line@)
	IF nRet% <> 0 THEN
		ControlBoard = nRet%
		EXIT FUNCTION
	END IF

	' ***** Line Motion 2 *******************************
	' == MtnSetSync ==
	' sync[4] = {axis X, axis Y, axis Z, axis U}
	sync@.POKEHALF(2 * 0, &H00 /*MTR_NO*/)
	sync@.POKEHALF(2 * 1, &H00 /*MTR_NO*/)
	errno = CFUNCALL(nRet%, "MtnSetSync", nDevice%, &H03, &H00 /*MTR_START_MODE*/, sync@)
	IF nRet% <> 0 THEN
		ControlBoard = nRet%
		EXIT FUNCTION
	END IF

	' == MtnSetMotionLine ==
	Line@.SETMEMVAL("wAxis", &h03)
	Line@.SETMEMVAL("wClock", 299)
	Line@.SETMEMVAL("wMode", &H06/*MTR_LINE*/)
	Line@.SETMEMVAL("wAccMode",&h00/*MTR_ACC_NORMAL*/)
	Line@.SETMEMVAL("fLowSpeed", 50.0)
	Line@.SETMEMVAL("fSpeed", 200.0)
	Line@.SETMEMVAL("ulAcc", 200)
	Line@.SETMEMVAL("ulDec", 300)
	Line@.SETMEMVAL("fSAccSpeed", 0.0)
	Line@.SETMEMVAL("fSDecSpeed", 0.0)
	Line@.SETMEMVAL("lStep[0]", -800)
	Line@.SETMEMVAL("lStep[1]", -1200)
	errno = CFUNCALL(nRet%, "MtnSetMotionLine", nDevice%, &h00 /*MTR_LINE_NORMAL*/, Line@)
	IF nRet% <> 0 THEN
		ControlBoard = nRet%
		EXIT FUNCTION
	END IF

	' == MtnStartMotion ==
	errno = CFUNCALL(nRet%, "MtnStartMotion", nDevice%, &H03, &H00 /*MTR_ACC*/, &H06 /*MTR_LINE*/)
	IF nRet% <> 0 THEN
		ControlBoard = nRet%
		EXIT FUNCTION
	END IF

	' Start Signel Output
	' == MtnOutputSync ==
	errno = CFUNCALL(nRet%, "MtnOutputSync", nDevice%, &H02 /*MTR_EXT_START*/)
	IF nRet% <> 0 THEN
		ControlBoard = nRet%
		EXIT FUNCTION
	END IF

	' ***** watch status ********************************
	
	DO WHILE (IS_STOP = FALSE)
		' == MtnReadCounter ==
		' counter[4] = {axis X, axis Y, axis Z, axis U}
		errno = CFUNCALL(nRet%, "MtnReadCounter", nDevice%, &H03, &H01 /*MTR_COUNTER*/, counter&)
		IF nRet% <> 0 THEN
			ControlBoard = nRet%
			EXIT FUNCTION
		END IF
	
		' == MtnReadSpeed ==
		' speed[4] = {axis X, axis Y, axis Z, axis U}
		errno = CFUNCALL(nRet%, "MtnReadSpeed", nDevice%, &H03, speed!)
		IF nRet% <> 0 THEN
			ControlBoard = nRet%
			EXIT FUNCTION
		END IF
		
		' == MtnGetStatus ==
		' status[4] = {axis X, axis Y, axis Z, axis U}
		errno = CFUNCALL(nRet%, "MtnGetStatus", nDevice%, &H03, &H00 /*MTR_BUSY*/, status&)
		IF nRet% <> 0 THEN
			ControlBoard = nRet%
			EXIT FUNCTION
		END IF
		
		FOR I=0 TO 1
			szIn$(I) = " ** "
			SELECT CASE status&(I) and &H07
			CASE &H01
				szIn$(I) = " -- "
			CASE &H02
				szIn$(I) = " UP "
			CASE &H04
				szIn$(I) = "DOWN"
			END SELECT
		NEXT I
		
		call Locate(0, 6)
		FOR I=0 TO 1
			PRINT "   +---------------------------------------------+ "
			PRINT "   |  "; szAxis$(I); " : velocity ["; szIn$(I); "] : "; FORMAT$(speed!(I), "000.0"); " Hz        | "
			PRINT "   |  "; szAxis$(I);" : pulse count : "; FORMAT$(counter&(I), "000000000");"           | "
		NEXT I
		PRINT "   +---------------------------------------------+ "
	
	LOOP
	
END FUNCTION

SUB DispError(ErrCode)

	local szErr$
  
	CLS
	call Locate(5, 6)

	SELECT CASE ErrCode
	CASE &Hc0000003		' MTR_ERROR_INVALID_DEVICE_NUMBER:
		szErr$ = "The device handle is invalid."
	CASE &Hc0000009		' MTR_ERROR_NOT_SUPPORTED:
		szErr$ = "The function is not supported."
	CASE &Hc0001000		' MTR_ERROR_NOW_MOVING:
		szErr$ = "moter is running now."
	CASE &Hc0001001		' MTR_ERROR_NOW_STOPPED:
		szErr$ = "Moter is stopped."
	CASE &Hc0001013		' MTR_ERROR_INVALID_AXIS:
		szErr$ = "Invalid axis is specified."
	CASE &Hc0001014		' MTR_ERROR_INVALID_SPEED:
		szErr$ = "Invalid velocity is specified."
	CASE &Hc0001015		' MTR_ERROR_INVALID_ACCDEC:
		szErr$ = "Invalid acceleration and deceleration time is specified."
	CASE &Hc0001016		' MTR_ERROR_INVALID_PULSE:
		szErr$ = "Invalid number of pulse is specified."
	CASE &Hc0001017		' MTR_ERROR_INVALID_PARAMETER:
		szErr$ = "Invalid parameter is specified."
	CASE &Hc0001020		' MTR_ERROR_NOW_INTERLOCKED:
		szErr$ = "The interlock has been asserted."
	CASE &Hc0001021		' MTR_ERROR_IMPOSSIBLE:
		szErr$ = "The specified request is not supported."
	CASE ELSE
		szErr$ = "Unknown error"
	END SELECT

	PRINT "Error : "; szErr$; CHR$(10)

END SUB

